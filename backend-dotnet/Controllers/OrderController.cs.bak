using Microsoft.AspNetCore.Mvc;
using ClothingStore.Services;
using ClothingStore.Models;

namespace ClothingStore.Controllers
{
    [ApiController]
    [Route("api/orders")]
    public class OrderController : ControllerBase
    {
        private readonly OrderService _orderService;
        
        public OrderController(OrderService orderService)
        {
            _orderService = orderService;
        }
        
        [HttpGet]
        public async Task<ActionResult<List<Order>>> GetAllOrders()
        {
            var orders = await _orderService.GetAllOrdersAsync();
            return Ok(orders);
        }
        
        [HttpGet("my-orders")]
        public async Task<ActionResult<List<Order>>> GetMyOrders([FromQuery] long userId)
        {
            try
            {
                var orders = await _orderService.GetOrdersByUserAsync(userId);
                return Ok(orders);
            }
            catch (Exception e)
            {
                return BadRequest(new { error = e.Message });
            }
        }
        
        [HttpGet("{id}")]
        public async Task<ActionResult<Order>> GetOrderById(long id)
        {
            var order = await _orderService.GetOrderByIdAsync(id);
            return order != null ? Ok(order) : NotFound();
        }
        
        [HttpPost]
        public async Task<ActionResult<Order>> CreateOrder([FromBody] CreateOrderRequest request)
        {
            try
            {
                var order = await _orderService.CreateOrderFromCartAsync(
                    request.UserId,
                    request.TotalAmount,
                    request.Address,
                    request.City,
                    request.State,
                    request.Pincode,
                    request.Phone,
                    request.PaymentMethod ?? "ONLINE",
                    request.CouponCode,
                    request.DiscountAmount
                );
                return Ok(order);
            }
            catch (Exception e)
            {
                return BadRequest(new { error = e.Message });
            }
        }
        
        [HttpPost("from-cart")]
        public async Task<ActionResult<Order>> CreateOrderFromCart([FromBody] CreateOrderRequest request)
        {
            try
            {
                var order = await _orderService.CreateOrderFromCartAsync(
                    request.UserId,
                    request.TotalAmount,
                    request.Address,
                    request.City,
                    request.State,
                    request.Pincode,
                    request.Phone,
                    request.PaymentMethod ?? "ONLINE",
                    request.CouponCode,
                    request.DiscountAmount
                );
                return Ok(order);
            }
            catch (Exception e)
            {
                return BadRequest(new { error = e.Message });
            }
        }
        
        [HttpPut("{id}/status")]
        public async Task<ActionResult<Order>> UpdateOrderStatus(long id, [FromBody] UpdateOrderStatusRequest request)
        {
            try
            {
                var order = await _orderService.UpdateOrderStatusAsync(id, request.Status.ToUpper(), request.Reason);
                return order != null ? Ok(order) : NotFound();
            }
            catch (Exception e)
            {
                return BadRequest(new { error = e.Message });
            }
        }
    }
    
    public class CreateOrderRequest
    {
        public long UserId { get; set; }
        public decimal TotalAmount { get; set; }
        public string Address { get; set; } = string.Empty;
        public string City { get; set; } = string.Empty;
        public string State { get; set; } = string.Empty;
        public string Pincode { get; set; } = string.Empty;
        public string Phone { get; set; } = string.Empty;
        public string? PaymentMethod { get; set; }
        public string? CouponCode { get; set; }
        public decimal DiscountAmount { get; set; } = 0;
    }
    
    public class UpdateOrderStatusRequest
    {
        public string Status { get; set; } = string.Empty;
        public string? Reason { get; set; }
    }
}